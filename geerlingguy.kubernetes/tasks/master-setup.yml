---
- name: Initialize Kubernetes master with kubeadm init.
  shell: >
    kubeadm init
    --pod-network-cidr={{ kubernetes_pod_network_cidr }}
    --apiserver-advertise-address={{ kubernetes_apiserver_advertise_address | default(ansible_default_ipv4.address) }}
    --kubernetes-version={{ kubernetes_version_kubeadm }}
    --image-repository=registry.aliyuncs.com/google_containers
    --ignore-preflight-errors={{ kubernetes_ignore_preflight_errors }}
    {{ kubernetes_kubeadm_init_extra_opts }}  | grep 'kubeadm join' -A 1 >/root/node-join.sh

  register: kubeadmin_init
  failed_when: false
  when: not kubernetes_init_stat.stat.exists

- name: Print the init output to screen.
  debug:
    var: kubeadmin_init.stdout
    verbosity: 2
  when: not kubernetes_init_stat.stat.exists

- name: Ensure .kube directory exists.
  file:
    path: ~/.kube
    state: directory

- name: Symlink the kubectl admin.conf to ~/.kube/conf.
  file:
    src: /etc/kubernetes/admin.conf
    dest: ~/.kube/config
    state: link

- name: Configure Flannel networking.
  command: "{{ item }}"
  with_items:
    - kubectl apply -f {{ kubernetes_flannel_manifest_file_rbac }}
    - kubectl apply -f {{ kubernetes_flannel_manifest_file }}
  register: flannel_result
  changed_when: "'created' in flannel_result.stdout"

- name: kubectl completion
  shell: echo "source <(kubectl completion bash)" >>/root/.bashrc

# TODO: Check if taint exists with something like `kubectl describe nodes`
# instead of using kubernetes_init_stat.stat.exists check.
- name: Allow pods on master node (if configured).
  command: "kubectl taint nodes --all node-role.kubernetes.io/master-"
  when:
    - kubernetes_allow_pods_on_master
    - not kubernetes_init_stat.stat.exists


- name: Enable the Kubernetes Web Dashboard UI (if configured).
  command: "kubectl create -f {{ kubernetes_web_ui_manifest_file }}"

- name: create dashboard_adminuser
  shell: "kubectl apply -f {{ kubernetes_dashboard_adminuser }}"

#- name: create metrics-server
#  shell: "kubectl  apply -f /etc/ansible/roles/geerlingguy.kubernetes/templates/metrics-server/1.8+/"
- name: start porxy
  sehll: kubectl proxy --address='0.0.0.0' --accept-hosts='^*$' --port {{ apiport }} &

- name: create rc.local
  shell: echo "kubectl proxy --address='0.0.0.0' --accept-hosts='^*$' --port {{ api_port }} &" >>/etc/rc.local  && chmod +x /etc/rc.local

- name: create heapster+influxdb+grafana
  shell: "kubectl apply -f https://raw.githubusercontent.com/woshijiqinga/ansible/master/geerlingguy.kubernetes/templates/heapster/heapster.yaml  && kubectl apply -f https://raw.githubusercontent.com/woshijiqinga/ansible/master/geerlingguy.kubernetes/templates/heapster/influxdb.yaml && kubectl apply -f https://raw.githubusercontent.com/woshijiqinga/ansible/master/geerlingguy.kubernetes/templates/heapster/grafana.yaml"

- name: create efk
  shell: "kubectl apply -f https://raw.githubusercontent.com/woshijiqinga/ansible/master/geerlingguy.kubernetes/templates/efk/filebeat.yaml && kubectl apply -f https://raw.githubusercontent.com/woshijiqinga/ansible/master/geerlingguy.kubernetes/templates/efk/elasticsearch.yml && kubectl apply -f https://raw.githubusercontent.com/woshijiqinga/ansible/master/geerlingguy.kubernetes/templates/efk/kibana.yml"

- name: install socat
  yum: name=socat

- name: install wget
  yum: name=wget

- name: install helm
  shell: wget https://storage.googleapis.com/kubernetes-helm/helm-{{ helm_version }}-linux-amd64.tar.gz && tar xf helm-{{ helm_version }}-linux-amd64.tar.gz && mv linux-amd64/helm /usr/local/bin/  && rm -rf helm-{{ helm_version }}-linux-amd64.tar.gz linux-amd64
  ignore_errors: true

- name: helm init 
  shell: helm init && helm init --client-only --stable-repo-url https://aliacs-app-catalog.oss-cn-hangzhou.aliyuncs.com/chart && helm repo add incubator https://aliacs-app-catalog.oss-cn-hangzhou.aliyuncs.com/charts-incubator/ && helm repo update
  ignore_errors: true

- name: install tiller
  shell: helm init --service-account tiller --upgrade -i registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:{{ helm_version }}  --stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts &&  helm init --service-account tiller --upgrade -i registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:{{ helm_version }} --tiller-tls-cert /etc/kubernetes/ssl/tiller001.pem --tiller-tls-key /etc/kubernetes/ssl/tiller001-key.pem --tls-ca-cert /etc/kubernetes/ssl/ca.pem --tiller-namespace kube-system --stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts 
  ignore_errors: true

- name: create tiller user
  shell: kubectl create serviceaccount --namespace kube-system tiller &&  kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller && kubectl patch deploy --namespace kube-system tiller-deploy -p '{"spec":{"template":{"spec":{"serviceAccount":"tiller"}}}}'
  ignore_errors: true
